The problem statement is given a list of coins, what is the least amount of coins we can use to add up to target.
The solution I thought of was using dynamic programming. As this problem is similar to the knapsack problem, we are going
to use a relatively similar approach. The general solution is starting from 1 to the target value, we are going to find
the least coins for every value until we can reach the target value, hoping that the previous iterations will give us 
the optimal choice as we continue to the target value. For every value leading up to target, first, we set our coinList(the one we 
are going to use to keep track of the min coins for every amount) as a max value, lets say infinity. We are going to iterate through the list
of coins and check if we can use the coin domination for that amount. In the example we are given 1,2,5 and target as 11.
If we start at a target of 1, we can see that the only domination less than or equal target is 1. We continue to target 2, we can see
it will again be 1, but here we need to check what is smaller, leastCoin[target], which is currently infinity, or leastCoin[target - currCoin(1)] + 1 = leastCoin[1] + 1.
We can see that leastCoin[1] + 1 = 2, is smaller than infinity. This small example shows a pattern, that we will check our previous solution,
at leastCoin[1], what is the smallest amount of coins that can add up to 1, which is 1. The power of this is that we will 
always be updating with an optimal solution as we iterate to target. So once we reach the target of 11, IE leastCoin[10] = 2 (2 coins of 5)
Our solution will check at coin 1, leastCoin[11-1] + 1(accounts for adding the curr coin), leastCoin[10] + 1 = 3. This pattern
will help us solve the problem by constantly checking previous optimal solutions as we build to our final solution. 
